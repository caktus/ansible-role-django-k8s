apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "celery-beat"
  namespace: "{{ k8s_namespace }}"
spec:
  serviceName: "celery-beat"
  selector:
    matchLabels:
      app: "celery-beat"
  replicas: 1
  template:
    metadata:
      labels:
        app: "celery-beat"
    spec:
{% if k8s_dockerconfigjson %}
      imagePullSecrets:
      - name: registry-secret
{% else %}
      imagePullSecrets: []
{% endif %}
      securityContext:
        fsGroup: 2000
      containers:
      - name: "celery-beat"
        image: "{{ k8s_worker_container["image"] }}:{{ k8s_worker_container["tag"] }}"
        imagePullPolicy: "{{ k8s_worker_container["image_pull_policy"] }}"
        # command: do not override `command:` as we want to run the docker-entrypoint.sh before starting args
        args: {{ k8s_worker_container["beat_command"] }}
        env:
        - name: GET_HOSTS_FROM
          value: dns
        - name: PYTHONPATH
          value: .
        envFrom:
        - secretRef:
            name: "celery-secrets"
        volumeMounts:
          - mountPath: /data
            name: beatvolume-claim
        resources: {{ k8s_worker_container["resources"] | to_json }}
  volumeClaimTemplates:
  - metadata:
      name: beatvolume-claim
      namespace: "{{ k8s_namespace }}"
    spec:
{% if k8s_storage_class_name is defined %}
      storageClassName: "{{ k8s_storage_class_name }}"
{% endif %}
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: beat-service
  namespace: "{{ k8s_namespace }}"
spec:
  clusterIP: None
  selector:
    app: celery-beat
