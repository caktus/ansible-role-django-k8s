{#
Anywhere we need to inject a non-scalar value, we use to_json instead of to_yaml because it:
1) more reliably includes wrapping {}
2) behaves identically on Python 2 and Python 3
(and all JSON is valid YAML).
#}
{% for container in k8s_worker_containers %}
{%+ if loop.index > 0 %}---{% endif +%}
apiVersion: v1
kind: Secret
metadata:
  name: "{{ container["name"] }}-secrets"
  labels:
    app: "{{ container["name"] }}"
  namespace: "{{ k8s_namespace }}"
type: Opaque
stringData: {{ container["environment"] | to_json }}
---
{% for volume in container.get("data_volumes", []) %}
apiVersion: v1
kind: Secret
metadata:
  name: "{{ container["name"] }}-volume-{{ volume["name"] }}"
  labels:
    app: "{{ container["name"] }}"
  namespace: "{{ k8s_namespace }}"
type: Opaque
stringData: {{ volume["data"] | to_json }}
---
{% endfor %}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ container["name"] }}"
  namespace: "{{ k8s_namespace }}"
spec:
  selector:
    matchLabels:
      app: "{{ container["name"] }}"
  replicas: {{ container["replicas"] }}
  strategy: {{ container["strategy"] | to_json }}
  template:
    metadata:
      labels:
        app: "{{ container["name"] }}"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ container["name"] }}
              topologyKey: kubernetes.io/hostname
{% if k8s_dockerconfigjson %}
      imagePullSecrets:
      - name: registry-secret
{% else %}
      imagePullSecrets: []
{% endif %}
      containers:
      - name: "{{ container["name"] }}"
        image: "{{ container["image"] }}:{{ container["tag"] }}"
        imagePullPolicy: "{{ container["image_pull_policy"] }}"
        # command: do not override `command:` as we want to run the docker-entrypoint.sh before starting args
        args: {{ container["worker_command"] }}
        env:
        - name: GET_HOSTS_FROM
          value: dns
        - name: PYTHONPATH
          value: "."
        - name: "{{ container["name"] | upper }}_SECRETS_HASH"
          value: "{{ container["environment"] | to_json | hash("sha256") }}"
        envFrom:
        - secretRef:
            name: "{{ container["name"] }}-secrets"
        resources: {{ container["resources"] | to_json }}
        volumeMounts: {% if not container.get("data_volumes") %}[]{% endif +%}
{% for volume in container.get("data_volumes", []) %}
          - name: {{ volume["name"] }}
            mountPath: "{{ volume["mountPath"] }}"
            readOnly: true
{% endfor %}
      volumes: {% if not container.get("data_volumes") %}[]{% endif +%}
{% for volume in container.get("data_volumes", []) %}
        - name: {{ volume["name"] }}
          secret:
            secretName: "{{ container["name"] }}-volume-{{ volume["name"] }}"
{% endfor %}
{% endfor %}
